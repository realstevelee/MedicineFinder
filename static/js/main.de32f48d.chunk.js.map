{"version":3,"sources":["Card.js","MedicineList.js","Medicine.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","links","name","symptom","className","alt","src","width","MedicineList","medicine","medicineComponent","map","item","i","key","id","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","bind","filterMedicine","this","filter","toLowerCase","includes","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qLAiBeA,EAfF,SAACC,GAAW,IACbC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QACrB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,WAAWC,IAAKL,EAAOM,MAAM,QACtC,6BACI,6BACI,4BAAKL,GACL,2BAAIC,OCUTK,EAjBM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACdC,EAAoBD,EAASE,KAAI,SAACC,EAAMC,GAC1C,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLE,GAAIN,EAASI,GAAGE,GAChBb,KAAMO,EAASI,GAAGX,KAClBC,QAASM,EAASI,GAAGV,QACrBF,MAAOQ,EAASI,GAAGZ,WAG3B,OACI,6BACKS,ICfAD,EAAW,CACpB,CACIM,GAAI,EACJb,KAAM,UACNC,QAAS,iCACTF,MAAO,uIAEX,CACIc,GAAI,EACJb,KAAM,QACNC,QAAS,0FACTF,MAAO,gFAEX,CACIc,GAAI,EACJb,KAAM,aACNC,QAAS,kCACTF,MAAO,iIAEX,CACIc,GAAI,EACJb,KAAM,UACNC,QAAS,yEACTF,MAAO,wHAEX,CACIc,GAAI,EACJb,KAAM,QACNC,QAAS,0DACTF,MAAO,wEAEX,CACIc,GAAI,EACJb,KAAM,OACNC,QAAS,wDACTF,MAAO,yECrBAe,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKb,UAAU,MACX,2BACIA,UAAU,mCACVc,KAAK,SAASC,YAAY,kBAC1BC,SAAUH,MC6BXI,E,kDA/BX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAT1C,EAAKC,MAAQ,CACTnB,SAAUA,EACVgB,YAAa,IAGjB,EAAKH,eAAiB,EAAKA,eAAeO,KAApB,gBAPZ,E,qDAeJ,IAAD,OACCC,EAAiBC,KAAKH,MAAMnB,SAASuB,QAAO,SAAAvB,GAC9C,OAAOA,EAASN,QAAQ8B,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAI1E,OAFAE,QAAQC,IAAIN,GAGR,6BACI,wBAAI1B,UAAU,YAAd,mBACA,kBAAC,EAAD,CAAWa,aAAcc,KAAKT,iBAC9B,kBAAC,EAAD,CAAcb,SAAUqB,S,GA1BtBO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.de32f48d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const { links, name, symptom } = props;\r\n    return (\r\n        <div className=\"bg-white dib br3 pa3 ma2 grow bw2 shadow-5 w-20\">\r\n            <img alt='medicine' src={links} width=\"230\"/>\r\n            <div>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{symptom}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst MedicineList = ({ medicine }) => {\r\n    const medicineComponent = medicine.map((item, i) => {\r\n        return <Card\r\n            key={i}\r\n            id={medicine[i].id}\r\n            name={medicine[i].name}\r\n            symptom={medicine[i].symptom}\r\n            links={medicine[i].links} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {medicineComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MedicineList;","export const medicine = [\r\n    {\r\n        id: 1,\r\n        name: 'Tylenol',\r\n        symptom: 'Fever, Nasal, Dry Cough, Aches',\r\n        links: 'https://www.londondrugs.com/on/demandware.static/-/Sites-londondrugs-master/default/dw3722203a/products/L9606567/large/L9606567.JPG'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Advil',\r\n        symptom: 'Headache, Toothache, Backache, Menstrual cramps, The common cold, Muscular aches, Fever',\r\n        links: 'https://images-na.ssl-images-amazon.com/images/I/81nRnJ-oemL._AC_SL1500_.jpg'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Polysporin',\r\n        symptom: 'External Ear infection, Earache',\r\n        links: 'https://www.polysporin.ca/sites/polysporin_ca/files/styles/product_image/public/product-images/1.9_polysporin_plus_pain_0.png'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Benylin',\r\n        symptom: 'Fever, Dry cough, Sore throat, Runny nasal, Headache, Chest congestion',\r\n        links: 'https://www.benylin.ca/sites/benylin_ca/files/styles/product_image/public/product-images/94190_beny_aio_270ml_en.png'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Pepto',\r\n        symptom: 'Nausea, Heartburn, Indigestion, Upset stomach, Diarrhea',\r\n        links: 'https://i5.walmartimages.ca/images/Enlarge/523/622/6000197523622.jpg'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Tums',\r\n        symptom: 'Sour stomach, Acid indigestion, Fast heartburn relief',\r\n        links: 'https://i5.walmartimages.ca/images/Enlarge/056/284/6000198056284.jpg'\r\n    },\r\n]\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='tc'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' placeholder='Search medicine'\r\n                onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport MedicineList from './MedicineList';\r\nimport { medicine } from './Medicine';\r\nimport SearchBox from './SearchBox';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            medicine: medicine,\r\n            searchfield: ''\r\n        }\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    \r\n    }\r\n\r\n    render() {\r\n        const filterMedicine = this.state.medicine.filter(medicine => {\r\n            return medicine.symptom.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        console.log(filterMedicine);\r\n\r\n        return (\r\n            <div>\r\n                <h1 className='tc white'>Medicine Finder</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <MedicineList medicine={filterMedicine} />\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}